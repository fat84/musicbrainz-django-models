#!/usr/bin/env bash
set -e

app='musicbrainz_django_models'
models="$app/models"
tests="$app/tests"
admin="$app/admin/__init__.py"
modules=$(ls -1 $app/models/*.py | grep -v __init__)

function checking() {
    printf '  %-72s' "$1"
}
function OK() {
    echo -e "\e[1;32mPASSED\e[0m"
}
function NOK() {
    echo -e "\e[1;31mFAILED\e[0m"
    exit 1
}

echo "================================================================================"
echo "                               Verifying Models                                 "
echo "================================================================================"
for module in $modules
do
    module_name=$(echo $module | cut -d '/' -f 3 | cut -d '.' -f 1)
    echo "Verifying: $module_name"

    checking 'import django.db.models' 
    grep 'from django.db import models' $module > /dev/null && OK || NOK

    checking 'from django.utils.encoding import python_2_unicode_compatible'
    grep 'from django.utils.encoding import python_2_unicode_compatible' $module > /dev/null && OK || NOK

    checking "class $module_name(models.Model)"
    grep "^class $module_name(models.Model):" $module > /dev/null && OK || NOK
    [ $? -ne 0 ] && echo "  Not Found: Class definition" && exit

    checking '@python_2_unicode_compatible'
    grep "^class $module_name(models.Model):" $module -B 1 | head -1 | grep '@python_2_unicode_compatible' > /dev/null && OK || NOK

    checking ".. module:: $module_name"
    rst_module=$(head -2 $models/$module_name.py | tail -1)
    [ "$rst_module" == ".. module:: $module_name" ] && OK || NOK

    checking "$module_name in __init__.py"
    grep "from .$module_name import $module_name" $app/models/__init__.py > /dev/null && OK || NOK

    checking "db_table = $module_name"
    grep "db_table = '$module_name'" $app/models/$module_name.py > /dev/null && OK || NOK

    # All Models must define __str__:
    checking 'def __str__(self):'
    grep '    def __str__(self):' $module > /dev/null && OK || NOK

    # All Models must NOT define __unicode__:
    checking 'def __unicode__(self):'
    grep '    def __unicode__(self):' $module > /dev/null && NOK || OK
done

echo "================================================================================"
echo "                                  Remodelling                                   "
echo "================================================================================"
[ -f "db.sqlite3" ] && rm "db.sqlite3"
rm -rf "$app/migrations/*"
rm -rf "$models/__pycache__"
rm -rf "$app/tests/__pycache__"
rm -rf "$app/__pycache__"
./manage.py makemigrations $app
./manage.py migrate
./manage.py loaddata musicbrainz_django_models/fixtures/*
[ $? -ne 0 ] && exit 1

echo "================================================================================"
echo "                                Building Admin                                  "
echo "================================================================================"

rm -f $admin
echo 'from django.contrib import admin' >> $admin
for module in $modules
do
    module_name=$(echo $module | cut -d '/' -f 3 | cut -d '.' -f 1)
    echo "from ..models import $module_name" >> $admin
done
echo '' >> $admin
for module in $modules
do
    module_name=$(echo $module | cut -d '/' -f 3 | cut -d '.' -f 1)
    echo "admin.site.register($module_name)" >> $admin
done

echo '__ALL__ = [' >> $admin
for module in $modules
do
    module_name=$(echo $module | cut -d '/' -f 3 | cut -d '.' -f 1)
    echo "    $module_name," >> $admin
done
echo ']' >> $admin

echo "================================================================================"
echo "                                    Testing                                     "
echo "================================================================================"

# If a test does not exist for a module, create a skeleton test:
for module in $modules
do
    module_name=$(echo $module | cut -d '/' -f 3 | cut -d '.' -f 1)
    module_test="$tests/test_$module_name.py"
    [ -f "$tests/test_$module_name.py" ] && continue
    echo "from django.test import TestCase"                                                                 >> $module_test
    grep 'ValidationError' $module > /dev/null && echo 'from django.core.exceptions import ValidationError' >> $module_test
    echo "from ..models import $module_name"                                                                >> $module_test
    echo ''                                                                                                 >> $module_test
    echo ''                                                                                                 >> $module_test
    echo "class test_$module_name(TestCase):"                                                               >> $module_test
    echo '    def setUp(self):'                                                                             >> $module_test
    echo "        self.subject = $module_name(name='Name')"                                                 >> $module_test
    echo ''                                                                                                 >> $module_test
    echo "    def test__${module_name}__instance(self):"                                                    >> $module_test
    echo "        self.assertIsInstance(self.subject, $module_name)"                                        >> $module_test
    echo ''                                                                                                 >> $module_test
    echo "    def test__${module_name}__str(self):"                                                         >> $module_test
    echo '        self.assertEqual(str(self.subject), self.subject.name)'                                   >> $module_test
    grep 'ValidationError' $module > /dev/null && echo ''                                                   >> $module_test
    grep 'ValidationError' $module > /dev/null && echo "    def test__${module_name}__name_choice(self):"   >> $module_test
    grep 'ValidationError' $module > /dev/null && echo '        with self.assertRaises(ValidationError):'   >> $module_test
    grep 'ValidationError' $module > /dev/null && echo '            self.subject.save()'                    >> $module_test
done

flake8 . --exclude musicbrainz_django_models/migrations --max-line-length 120
[ $? -ne 0 ] && echo "flake8 failed" && exit 1

coverage run --source='.' ./manage.py test $app.tests --verbosity 2 --failfast
[ "$?" -ne 0 ] && exit
coverage report
coverage html

echo "========================================================================"
echo "                       Generating Documentation                         "
echo "========================================================================"

intro='This project is an attempt to express the MusicBrainz database schema \
as Django Models.\'

echo 'MusicBrainz Django Models' >  _docs/index.rst
echo '=========================' >> _docs/index.rst
echo ''                          >> _docs/index.rst
cat >> _docs/index.rst << EOF
This project is an attempt to express the MusicBrainz database schema as
Django Models.

    See the \`GitHub Repository\`_.

.. _GitHub Repository: https://github.com/marios-zindilis/musicbrainz-django-models
EOF
echo ''                          >> _docs/index.rst
echo 'Models'                    >> _docs/index.rst
echo '------'                    >> _docs/index.rst
echo ''                          >> _docs/index.rst
echo '.. toctree::'              >> _docs/index.rst
echo '   :maxdepth: 1'           >> _docs/index.rst
echo ''                          >> _docs/index.rst
for module in $modules
do
    module_name=$(echo $module | cut -d '/' -f 3 | cut -d '.' -f 1)
    echo "   $module_name"       >> _docs/index.rst
done
echo ''                          >> _docs/index.rst
echo 'Indices and tables'        >> _docs/index.rst
echo '=================='        >> _docs/index.rst
echo ''                          >> _docs/index.rst
echo '* :ref:`genindex`'         >> _docs/index.rst
echo '* :ref:`modindex`'         >> _docs/index.rst
echo '* :ref:`search`'           >> _docs/index.rst

for module in $modules
do
    module_name=$(echo $module | cut -d '/' -f 3 | cut -d '.' -f 1)
    [ -f _docs/$module_name.rst ] && continue
    echo "$module_name"                                     >> _docs/$module_name.rst
    echo '============'                                     >> _docs/$module_name.rst
    echo ''                                                 >> _docs/$module_name.rst
    echo ".. automodule:: $app.models.$module_name"         >> _docs/$module_name.rst
    echo '   :noindex:'                                     >> _docs/$module_name.rst
    echo ''                                                 >> _docs/$module_name.rst
    echo 'Model Documentation'                              >> _docs/$module_name.rst
    echo '-------------------'                              >> _docs/$module_name.rst
    echo ''                                                 >> _docs/$module_name.rst
    echo ".. autoclass:: $app.models.$module_name"          >> _docs/$module_name.rst
    echo ''                                                 >> _docs/$module_name.rst
    echo 'Model Source'                                     >> _docs/$module_name.rst
    echo '------------'                                     >> _docs/$module_name.rst
    echo ''                                                 >> _docs/$module_name.rst
    echo ".. literalinclude:: ../$models/$module_name.py"   >> _docs/$module_name.rst
    echo "   :pyobject: $module_name"                       >> _docs/$module_name.rst
    echo "   :caption: The \`$module_name\` Model"          >> _docs/$module_name.rst
done

sphinx-build -b html . _build
if [ "$1" == "bp" ]
then
    sphinx-build -b html . ~/Public/Dropbox/Code/marios-zindilis.github.io/projects/musicbrainz-django-models/
fi
